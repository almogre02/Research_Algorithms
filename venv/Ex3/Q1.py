import itertools
import doctest
def bounded_subset(S, C):
    """
    >>> for i in bounded_subset([1,2,3],4): print(i)
    []
    [1]
    [2]
    [3]
    [1, 2]
    [1, 3]
    >>> for i in bounded_subset([1,2,3], 1): print(i)
    []
    [1]
    >>> for i in bounded_subset([1,2,3,4,5,6,7,8,9,10], 88): print(i)
    []
    [1]
    [2]
    [3]
    [4]
    [5]
    [6]
    [7]
    [8]
    [9]
    [10]
    [1, 2]
    [1, 2, 3]
    [1, 2, 3, 4]
    [1, 2, 3, 4, 5]
    [1, 2, 3, 4, 5, 6]
    [1, 2, 3, 4, 5, 6, 7]
    [1, 2, 3, 4, 5, 6, 7, 8]
    [1, 2, 3, 4, 5, 6, 7, 8, 9]
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    >>> for i in bounded_subset([1,11,22,33,44,55,66,77,88,99],500): print(i)
    []
    [1]
    [11]
    [22]
    [33]
    [44]
    [55]
    [66]
    [77]
    [88]
    [99]
    [1, 11]
    [1, 11, 22]
    [1, 11, 22, 33]
    [1, 11, 22, 33, 44]
    [1, 11, 22, 33, 44, 55]
    [1, 11, 22, 33, 44, 55, 66]
    [1, 11, 22, 33, 44, 55, 66, 77]
    [1, 11, 22, 33, 44, 55, 66, 77, 88]
    [1, 11, 22, 33, 44, 55, 66, 77, 88, 99]
    >>> for i in bounded_subset([1,32,4,65,3,45,7,78,6,48],65): print(i)
    []
    [1]
    [3]
    [4]
    [6]
    [7]
    [32]
    [45]
    [48]
    [65]
    [1, 3]
    [1, 3, 4]
    [1, 3, 4, 6]
    [1, 3, 4, 6, 7]
    [1, 3, 4, 6, 7, 32]
    [1, 3, 4, 6, 32]
    [1, 3, 4, 6, 45]
    [1, 3, 4, 7, 32]
    [1, 3, 4, 7, 45]
    [1, 3, 4, 32]
    [1, 3, 4, 45]
    [1, 3, 6, 7, 32]
    [1, 3, 6, 7, 45]
    [1, 3, 6, 32]
    [1, 3, 6, 45]
    [1, 3, 7, 32]
    [1, 3, 7, 45]
    [1, 3, 32]
    [1, 3, 45]
    [1, 4, 6, 7, 32]
    [1, 4, 6, 7, 45]
    [1, 4, 6, 32]
    [1, 4, 6, 45]
    [1, 4, 7, 32]
    [1, 4, 7, 45]
    [1, 4, 32]
    [1, 4, 45]
    [1, 6, 7, 32]
    [1, 6, 7, 45]
    [1, 6, 32]
    [1, 6, 45]
    [1, 7, 32]
    [1, 7, 45]
    [1, 32]
    [1, 45]
    [3, 4, 6, 7, 32]
    [3, 4, 6, 7, 45]
    [3, 4, 6, 32]
    [3, 4, 6, 45]
    [3, 4, 7, 32]
    [3, 4, 7, 45]
    [3, 4, 32]
    [3, 4, 45]
    [3, 6, 7, 32]
    [3, 6, 7, 45]
    [3, 6, 32]
    [3, 6, 45]
    [3, 7, 32]
    [3, 7, 45]
    [3, 32]
    [3, 45]
    [4, 6, 7, 32]
    [4, 6, 7, 45]
    [4, 6, 32]
    [4, 6, 45]
    [4, 7, 32]
    [4, 7, 45]
    [4, 32]
    [4, 45]
    [6, 7, 32]
    [6, 7, 45]
    [6, 32]
    [6, 45]
    [7, 32]
    [7, 45]
    [1, 3, 4, 6, 48]
    [1, 3, 4, 7, 48]
    [1, 3, 4, 48]
    [1, 3, 6, 7, 48]
    [1, 3, 6, 48]
    [1, 3, 7, 48]
    [1, 3, 48]
    [1, 4, 6, 7]
    [1, 4, 6, 48]
    [1, 4, 7, 48]
    [1, 4, 48]
    [1, 6, 7, 48]
    [1, 6, 48]
    [1, 7, 48]
    [1, 48]
    [3, 4, 6, 7]
    [3, 4, 6, 48]
    [3, 4, 7, 48]
    [3, 4, 48]
    [3, 6, 7, 48]
    [3, 6, 48]
    [3, 7, 48]
    [3, 48]
    [4, 6, 7, 48]
    [4, 6, 48]
    [4, 7, 48]
    [4, 48]
    [6, 7, 48]
    [6, 48]
    [7, 48]
    [1, 3, 4, 7]
    [1, 3, 6, 7]
    [1, 3, 6]
    [1, 3, 7]
    [1, 4, 6]
    [1, 4, 7]
    [1, 4]
    [1, 6, 7]
    [1, 6]
    [1, 7]
    [3, 4, 6]
    [3, 4, 7]
    [3, 4]
    [3, 6, 7]
    [3, 6]
    [3, 7]
    [4, 6, 7]
    [4, 6]
    [4, 7]
    [6, 7]
    >>> for i in bounded_subset([100,50,25,12,6,3,1],250): print(i)
    []
    [1]
    [3]
    [6]
    [12]
    [25]
    [50]
    [100]
    [1, 3]
    [1, 3, 6]
    [1, 3, 6, 12]
    [1, 3, 6, 12, 25]
    [1, 3, 6, 12, 25, 50]
    [1, 3, 6, 12, 25, 50, 100]
    """
    temp_set = []
    final_sets = []
    final_sets.append([])
    S.sort()
    for i in range(len(S)):
        if S[i] <= C:
            temp_set.append(S[i])
            final_sets.append([S[i]])
        else:
            break
    temp_set.sort()

    for i in range(len(temp_set)):
        for iter_p in itertools.permutations(temp_set[:i+1]): #permutation in size of 1 -> than 2 -> and...
            temp_ans = []
            sum = 0
            for p in iter_p:
                sum+=p
                if sum <= C:
                    temp_ans.append(p)
            temp_ans.sort()
            if temp_ans not in final_sets:
                final_sets.append(temp_ans)
    for i in range(len(final_sets)):
        yield final_sets[i]



if __name__ == '__main__':
    for ans in bounded_subset([1, 2, 3], 4):
        print(ans, end= ',')
    print()
    for ans in bounded_subset([6, 1, 2, 5, 3, 1], 8):
        print(ans, end= ',')

    print("\nTests Results:")
    (failures, tests) = doctest.testmod(report=True)
    print("{} failures, {} tests".format(failures, tests))
